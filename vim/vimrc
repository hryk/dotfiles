" vimrc
set nocompatible

" Chicken Or Egg Dilemma
"   http://gmarik.info/blog/2011/05/17/chicken-or-egg-dilemma
source $HOME/.vim/bundles.vim " $ vim -u bundles.vim +BundleInstall +q

"" color scheme

syntax enable
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

if has('gui_running')
    set guifont=Menlo\ for\ Powerline:h12
endif

set backspace=eol,indent,start

"" search pattern
set ignorecase
set smartcase
set hlsearch
set incsearch

"" status
set showmode
set showcmd
set showmatch

"" show line number
set number

"" indenting
set expandtab
set ts=2
set shiftwidth=2
set softtabstop=2

"" backup
set nobackup

"" statusline
set laststatus=2


"" encodings
set termencoding=utf-8
set encoding=utf-8
set fileencodings=utf-8,euc-jp,iso-2022-jp,shift-jis
set ambiwidth=double

nnoremap fe :<C-u>e ++enc=euc-jp<Enter>
nnoremap fs :<C-u>e ++enc=shift-jis<Enter>
nnoremap fu :<C-u>e ++enc=utf-8<Enter>

"" folding
set foldmethod=marker

" key binding

"" leader
let mapleader=","

"" edit vimrc
nnoremap <Space>.	:<C-u>edit $MYVIMRC<Enter>

"" reload vimrc
nnoremap <Space>s.	:<C-u>source $MYVIMRC<Enter>

"" show help about a word under cursor
nnoremap <C-h><C-h> :<C-u>help<Space>

"" : -> ;
noremap ; :
noremap : ;

"" j -> gj, k -> gk
noremap j gj
noremap k gk
noremap gj j
noremap gk k

"" insert date
inoremap <expr> ,df strftime('%Y-%m-%dT%H:%M:%S')
inoremap <expr> ,dd strftime('%Y-%m-%d')
inoremap <expr> ,dt strftime('%H:%M:%S')

"" gc (g changee)
nnoremap gc `[v`]
vnoremap gc :<C-u>normal gc<Enter>
onoremap gc :<C-u>normal gc<Enter>

"" redraw
nnoremap sh :<C-u>redraw!<Enter>

" wordwrap
" nnoremap GG gqG

nnoremap <Leader>H :call<SID>LongLineHLToggle()<cr>
hi OverLength ctermbg=none cterm=none
match OverLength /\%>80v/
fun! s:LongLineHLToggle()
  if !exists('w:longlinehl')
    let w:longlinehl = matchadd('ErrorMsg', '.\%>80v', 0)
    echo "Long lines highlighted"
  else
    call matchdelete(w:longlinehl)
    unl w:longlinehl
    echo "Long lines unhighlighted"
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""
" autocmds
"----------------------------------------
" autocmd!

au BufRead,BufNewFile *.thor   setf ruby
au BufRead,BufNewFile *.coffee setf coffee
au BufRead,BufNewFile *.as     setf actionscript
au BufRead,BufNewFile *.rl     set syn=ragel

" delete trailing whitespace when saved.
autocmd FileType c,cpp,java,php,ruby,javascript,haml,coffee,css autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd User Rails Rnavcommand fabricator spec/fabricators -suffix=_fabricator.rb -default=model()

" google/yapf code formatter for python
" autocmd FileType python nnoremap <LocalLeader>= :0,$!yapf<CR>

""""""""""""""""""""""""""""""""""""""""""
" Plugin Settings
"
" Plugins are installed with Vundle.
" see ~/.vim/bundles.vim
"
""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""
" Coffee
"-----------------------------------------

hi link coffeeSpaceError NONE
hi link coffeeSemicolonError NONE
hi link coffeeReservedError NONE

""""""""""""""""""""""""""""""""""""""""""
" vimfiler
"-----------------------------------------

let g:vimfiler_as_default_explorer = 1

""""""""""""""""""""""""""""""""""""""""""
" Unite
"-----------------------------------------

let g:unite_enable_start_insert = 1
let g:unite_source_file_mru_filename_format = ''
let g:unite_winheight = 15

nnoremap <silent> <C-f> :<C-u>Unite -toggle -auto-resize file file_mru file/new locate<Enter>
nnoremap <silent> <C-c> :<C-u>UniteWithCurrentDir -toggle -auto-resize file file/new<CR>
nnoremap <silent> <C-b> :<C-u>Unite -toggle buffer<Enter>
nnoremap <silent> gl :<C-u>Unite -toggle git<Enter>
nnoremap <silent> gb :<C-u>Unite -buffer-name=files -toggle file directory file/new file_mru git<Enter>
nnoremap <silent> bg :<C-u>Unite -toggle buffer<Enter>

autocmd FileType unite cal s:unite_my_settings()
function! s:unite_my_settings()
  imap <silent><buffer> <C-j> <Plug>(unite_do_default_action)<CR>
  imap <silent><buffer> <Esc><Esc> <Plug>(unite_exit)<CR>
  nmap <silent><buffer> <Esc><Esc> <Plug>(unite_exit)<CR>
  imap <silent><buffer> <Esc>j <Plug>(unite_exit)<CR>
  nmap <silent><buffer> <Esc>j <Plug>(unite_exit)<CR>
  nmap <silent><buffer> <Esc> <Plug>(unite_exit)<CR>
  nmap <silent><buffer> <C-w> <Plug>(unite_delete_backward_path)
  imap <silent><buffer> <C-w> <Plug>(unite_delete_backward_path)
  nmap <silent><buffer> <C-h> <Plug>(unite_delete_backward_char)
  imap <silent><buffer> <C-h> <Plug>(unite_delete_backward_char)
endfunction

""""""""""""""""""""""""""""""""""""""""""
" Rails.vim
"-----------------------------------------

nnoremap rr :<C-u>1R<Space>

""""""""""""""""""""""""""""""""""""""""""
" Surround
"-----------------------------------------

let g:surround_45 = "<% \r %>"
let g:surround_61 = "<%= \r %>"
let g:surround_{char2nr("g")} = "[[\r]]"

""""""""""""""""""""""""""""""""""""""""""
" tagbar
" ----------------------------------------

let g:tagbar_ctags_bin ='/usr/local/bin/ctags'
nnoremap <silent> tl :TagbarToggle<CR>
nnoremap <silent> tq :TagbarClose<CR>

""""""""""""""""""""""""""""""""""""""""""
" git-branch-info
" ----------------------------------------

let g:git_branch_status_text=": git :"

""""""""""""""""""""""""""""""""""""""""""
" fugitive
" ----------------------------------------

nnoremap <silent> gw :Gwrite<CR>
nnoremap <silent> gc :Gcommit<CR>

""""""""""""""""""""""""""""""""""""""""""
" changelog.vim
" ----------------------------------------

let g:changelog_timeformat = "%Y-%m-%d"
let g:changelog_username = "Hiroyuki Nakamura <hiroyuki@1vq9.com>"
let g:spec_chglog_format = "%c Hiroyuki Nakamura <hiroyuki@1vq9.com>>"

au BufNewFile,BufRead *.changelog,Changelog,Changes,ChangeLog setf changelog

""""""""""""""""""""""""""""""""""""""""""
" neocomplete
" ----------------------------------------

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_select = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist'
    \ }

if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Omni input patterns
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'

""""""""""""""""""""""""""""""""""""""""""
" ale
" ----------------------------------------

let g:ale_enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1

nnoremap <silent> <C-k> <Plug>(ale_previous_wrap)
nnoremap <silent> <C-j> <Plug>(ale_next_wrap)

"" Write this in your vimrc file
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 1

let g:ale_set_quickfix = 1
let g:ale_python_pylint_options = '-rcfile ~/.pylint.rc'

""""""""""""""""""""""""""""""""""""""""""
" linediff
" ----------------------------------------

" vnoremap ld :<C-u>Linediff <Enter>
" nnoremap lr :<C-u>LinediffReset <Enter>

let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1  = "inc"

""""""""""""""""""""""""""""""""""""""""""
" markdown
" ----------------------------------------

let g:vim_markdown_folding_disabled=1

""""""""""""""""""""""""""""""""""""""""""
" JpFormat
" ----------------------------------------

nnoremap <silent> ff :<C-u>JpFormatAll<CR>
nnoremap <silent> <Esc>o :<C-u>JpJoinAll<CR>

""""""""""""""""""""""""""""""""""""""""""
" powerline
" ----------------------------------------

python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

""""""""""""""""""""""""""""""""""""""""""
" python-mode
" ----------------------------------------

let g:pymode = 1
let g:pymode_warnings = 0
let g:pymode_paths = []
let g:pymode_trim_whitespaces = 0
let g:pymode_options = 0
let g:pymode_options_max_line_length = 79
let g:pymode_options_colorcolumn = 0
let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 6
let g:pymode_python = 'python'
let g:pymode_indent = 0
let g:pymode_folding = 0
let g:pymode_motion = 0
let g:pymode_doc = 0
let g:pymode_doc_bind = 'K'
let g:pymode_virtualenv = 0
let g:pymode_virtualenv_path = $VIRTUAL_ENV
let g:pymode_run = 0
let g:pymode_run_bind = '<leader>r'
let g:pymode_breakpoint = 0
let g:pymode_breakpoint_cmd = ''
let g:pymode_lint = 0
let g:pymode_lint_on_write = 0
let g:pymode_lint_unmodified = 0
let g:pymode_lint_on_fly = 0
let g:pymode_lint_message = 0
" Values may be chosen from: `pylint`, `pep8`, `mccabe`, `pep257`, `pyflakes`
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
let g:pymode_lint_ignore = "E501,W"
" let g:pymode_lint_select = "E501,W0011,W430"
let g:pymode_lint_sort = []
let g:pymode_lint_cwindow = 0
let g:pymode_lint_signs = 0
let g:pymode_lint_todo_symbol = 'WW'
let g:pymode_lint_comment_symbol = 'CC'
let g:pymode_lint_visual_symbol = 'RR'
let g:pymode_lint_error_symbol = 'EE'
let g:pymode_lint_info_symbol = 'II'
let g:pymode_lint_pyflakes_symbol = 'FF'
" rope
let g:pymode_rope = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_completion_bind = '<C-Space>'
let g:pymode_rope_autoimport = 0
let g:pymode_rope_autoimport_modules = ['os', 'shutil', 'datetime']
let g:pymode_rope_autoimport_import_after_complete = 0
let g:pymode_syntax = 0
let g:pymode_syntax_slow_sync = 0
let g:pymode_syntax_all = 0
let g:pymode_syntax_print_as_function = 0
let g:pymode_syntax_highlight_async_await = g:pymode_syntax_all

augroup filetypedetect
  au BufNewFile,BufRead *.gff3  set filetype=gff
augroup END

