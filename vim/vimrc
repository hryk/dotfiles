" vimrc
"
" 2019-12-31:
"		- 使っていない設定を削除
"		- 追加したプラグインの設定を追加

set nocompatible

source $HOME/.vim/bundles.vim

"" color scheme (vim-colors-solarized)
syntax enable
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

if has('gui_running')
  set guifont=Menlo\ for\ Powerline:h12
endif

set backspace=eol,indent,start

"" search pattern
set ignorecase
set smartcase
set hlsearch
set incsearch

"" status
set showmode
set showcmd
set showmatch

"" show line number
set number

"" indenting
set expandtab
set ts=2
set shiftwidth=2
set softtabstop=2

"" backup
set nobackup

"" statusline
set laststatus=2

"" encodings
set termencoding=utf-8
set encoding=utf-8
set fileencodings=utf-8,euc-jp,iso-2022-jp,shift-jis
set ambiwidth=double

nnoremap fe :<C-u>e ++enc=euc-jp<Enter>
nnoremap fs :<C-u>e ++enc=shift-jis<Enter>
nnoremap fu :<C-u>e ++enc=utf-8<Enter>

"" folding
set foldmethod=marker

" key binding

"" leader
let mapleader=","

"" edit vimrc
nnoremap <Space>.	:<C-u>edit $MYVIMRC<Enter>

"" reload vimrc
nnoremap <Space>s.	:<C-u>source $MYVIMRC<Enter>

"" show help about a word under cursor
nnoremap <C-h><C-h> :<C-u>help<Space>

"" : -> ;
noremap ; :
noremap : ;

"" j -> gj, k -> gk
noremap j gj
noremap k gk
noremap gj j
noremap gk k

"" insert date
inoremap <expr> ,df strftime('%Y-%m-%dT%H:%M:%S')
inoremap <expr> ,dd strftime('%Y-%m-%d')
inoremap <expr> ,dt strftime('%H:%M:%S')

"" gc (g changee)
nnoremap gc `[v`]
vnoremap gc :<C-u>normal gc<Enter>
onoremap gc :<C-u>normal gc<Enter>

"" redraw
nnoremap sh :<C-u>redraw!<Enter>

nnoremap <Leader>H :call<SID>LongLineHLToggle()<cr>
hi OverLength ctermbg=none cterm=none
match OverLength /\%>80v/
fun! s:LongLineHLToggle()
  if !exists('w:longlinehl')
    let w:longlinehl = matchadd('ErrorMsg', '.\%>80v', 0)
  else
    call matchdelete(w:longlinehl)
    unl w:longlinehl
    echo "Long lines unhighlighted"
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""
" autocmds
"----------------------------------------
" autocmd!

au BufRead,BufNewFile *.thor   setf ruby
au BufRead,BufNewFile *.coffee setf coffee
au BufRead,BufNewFile *.rl     set syn=ragel

autocmd User Rails Rnavcommand fabricator spec/fabricators -suffix=_fabricator.rb -default=model()

""""""""""""""""""""""""""""""""""""""""""
" Plugin Settings
"
" Plugins are installed with vim-plug.
" see ~/.vim/bundles.vim
"
""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""
" nathanaelkane/vim-indent-guides
"-----------------------------------------

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

""""""""""""""""""""""""""""""""""""""""""
" ntpeters/vim-better-whitespace
"-----------------------------------------

let g:better_whitespace_enabled = 1
let g:strip_whitespace_on_save = 1
" delete trailing whitespace when saved.
let g:better_whitespace_filetypes_blacklist=['<filetype1>', '<filetype2>', '<etc>',
      \'diff', 'gitcommit', 'unite', 'qf', 'help', 'markdown']

""""""""""""""""""""""""""""""""""""""""""
" scrooloose/nerdcommenter
"-----------------------------------------

let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1

""""""""""""""""""""""""""""""""""""""""""
" editorconfig/editorconfig-vim
"-----------------------------------------

let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

""""""""""""""""""""""""""""""""""""""""""
" pangloss/vim-javascript
"-----------------------------------------

augroup javascript_folding
    au!
    au FileType javascript setlocal foldmethod=syntax
augroup END

""""""""""""""""""""""""""""""""""""""""""
" Shougo/denite.nvim
"-----------------------------------------

nnoremap <silent> gb :<C-u>Denite file_mru file/old file/rec<Enter>
nnoremap <silent> gp :<C-u>DeniteProjectDir file/rec<Enter>

nnoremap <silent> bg :<C-u>Denite buffer<Enter>

autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  nnoremap <silent><buffer><expr> o denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>denite#do_map('quit')
	nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
	nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
endfunction

call denite#custom#var('file/rec', 'command',
\ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

call denite#custom#source(
\ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])

""""""""""""""""""""""""""""""""""""""""""
" tpope/vim-rails
"-----------------------------------------

nnoremap rr :<C-u>1R<Space>

""""""""""""""""""""""""""""""""""""""""""
" tpope/vim-surround
"-----------------------------------------

let g:surround_45 = "<% \r %>"
let g:surround_61 = "<%= \r %>"
let g:surround_{char2nr("g")} = "[[\r]]"

""""""""""""""""""""""""""""""""""""""""""
" majutsushi/tagbar
" ----------------------------------------

let g:tagbar_ctags_bin ='/usr/local/bin/ctags'
nnoremap <silent> tl :TagbarToggle<CR>
nnoremap <silent> tq :TagbarClose<CR>

""""""""""""""""""""""""""""""""""""""""""
" tpope/vim-fugitive
" ----------------------------------------

nnoremap <silent> gw :Gwrite<CR>
nnoremap <silent> gc :Gcommit<CR>

""""""""""""""""""""""""""""""""""""""""""
" changelog.vim
" ----------------------------------------

let g:changelog_timeformat = "%Y-%m-%d"
let g:changelog_username = "Hiroyuki Nakamura <hi@1vq9.com>"
let g:spec_chglog_format = "%c Hiroyuki Nakamura <hi@1vq9.com>>"

au BufNewFile,BufRead *.changelog,Changelog,Changes,ChangeLog setf changelog

""""""""""""""""""""""""""""""""""""""""""
" Shougo/deoplete.nvim
" ----------------------------------------

let g:python_host_prog = expand('~/.pyenv/shims/python2')
let g:python3_host_prog = expand('~/.pyenv/shims/python3')

let g:deoplete#enable_at_startup = 1

call deoplete#custom#option({
\ 'auto_complete_delay': 200,
\ 'smart_case': v:true,
\ 'auto_complete': v:true,
\ 'min_pattern_length': 3,
\ })

" Enable omni completion.
call deoplete#custom#source('omni', 'functions', {
    \ 'ruby':  'rubycomplete#Complete',
    \ 'css':  'csscomplete#CompleteCSS',
    \ 'html':  'htmlcomplete#CompleteTags',
    \ 'javascript': ['tern#Complete', 'jspc#omni']
    \})

""""""""""""""""""""""""""""""""""""""""""
" Shougo/defx.nvim
" ----------------------------------------

nnoremap <silent> dh :Defx -buffer-name=defx -toggle -split=horizontal
      \ -winheight=15<CR>
nnoremap <silent> dv :Defx -buffer-name=defx -toggle -split=vertical<CR>

nnoremap <silent><buffer><expr> > defx#do_action('resize',
      \ defx#get_context().winwidth + 10)
nnoremap <silent><buffer><expr> < defx#do_action('resize',
      \ defx#get_context().winwidth - 10)

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
	" Define mappings
	nnoremap <silent><buffer><expr> <CR>
				\ defx#do_action('open')
	nnoremap <silent><buffer><expr> c
				\ defx#do_action('copy')
	nnoremap <silent><buffer><expr> m
				\ defx#do_action('move')
	nnoremap <silent><buffer><expr> p
				\ defx#do_action('paste')
	nnoremap <silent><buffer><expr> l
				\ defx#do_action('open')
	nnoremap <silent><buffer><expr> E
				\ defx#do_action('open', 'vsplit')
	nnoremap <silent><buffer><expr> P
				\ defx#do_action('open', 'pedit')
	nnoremap <silent><buffer><expr> o
				\ defx#do_action('open_or_close_tree')
	nnoremap <silent><buffer><expr> K
				\ defx#do_action('new_directory')
	nnoremap <silent><buffer><expr> N
				\ defx#do_action('new_file')
	nnoremap <silent><buffer><expr> M
				\ defx#do_action('new_multiple_files')
	nnoremap <silent><buffer><expr> C
				\ defx#do_action('toggle_columns',
				\                'mark:indent:icon:filename:type:size:time')
	nnoremap <silent><buffer><expr> S
				\ defx#do_action('toggle_sort', 'time')
	nnoremap <silent><buffer><expr> d
				\ defx#do_action('remove')
	nnoremap <silent><buffer><expr> r
				\ defx#do_action('rename')
	nnoremap <silent><buffer><expr> !
				\ defx#do_action('execute_command')
	nnoremap <silent><buffer><expr> x
				\ defx#do_action('execute_system')
	nnoremap <silent><buffer><expr> yy
				\ defx#do_action('yank_path')
	nnoremap <silent><buffer><expr> .
				\ defx#do_action('toggle_ignored_files')
	nnoremap <silent><buffer><expr> ;
				\ defx#do_action('repeat')
	nnoremap <silent><buffer><expr> h
				\ defx#do_action('cd', ['..'])
	nnoremap <silent><buffer><expr> u
				\ defx#do_action('cd', ['..'])
	nnoremap <silent><buffer><expr> ~
				\ defx#do_action('cd')
	nnoremap <silent><buffer><expr> q
				\ defx#do_action('quit')
	nnoremap <silent><buffer><expr> <Esc>
				\ defx#do_action('quit')
	nnoremap <silent><buffer><expr> <Space>
				\ defx#do_action('toggle_select') . 'j'
	nnoremap <silent><buffer><expr> *
				\ defx#do_action('toggle_select_all')
	nnoremap <silent><buffer><expr> j
				\ line('.') == line('$') ? 'gg' : 'j'
	nnoremap <silent><buffer><expr> k
				\ line('.') == 1 ? 'G' : 'k'
	nnoremap <silent><buffer><expr> <C-l>
				\ defx#do_action('redraw')
	nnoremap <silent><buffer><expr> <C-g>
				\ defx#do_action('print')
	nnoremap <silent><buffer><expr> cd
				\ defx#do_action('change_vim_cwd')
endfunction

""""""""""""""""""""""""""""""""""""""""""
" ale
" ----------------------------------------

let g:ale_enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1

nnoremap <silent> <C-k> <Plug>(ale_previous_wrap)
nnoremap <silent> <C-j> <Plug>(ale_next_wrap)

"" Write this in your vimrc file
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 1

let g:ale_set_quickfix = 1
let g:ale_python_pylint_options = '-rcfile ~/.pylint.rc'

""""""""""""""""""""""""""""""""""""""""""
" AndrewRadev/linediff.vim
" ----------------------------------------

vnoremap Ld :<C-u>Linediff <Enter>
nnoremap Lr :<C-u>LinediffReset <Enter>

""""""""""""""""""""""""""""""""""""""""""
" plasticboy/vim-markdown
" ----------------------------------------

let g:vim_markdown_folding_disabled=1

""""""""""""""""""""""""""""""""""""""""""
" fuenor/JpFormat.vim
" ----------------------------------------

nnoremap <silent> ff :<C-u>JpFormatAll<CR>
nnoremap <silent> <Esc>o :<C-u>JpJoinAll<CR>

""""""""""""""""""""""""""""""""""""""""""
" powerline-status
" ----------------------------------------

let g:powerline_pycmd="python3"
python3 from powerline.vim import setup as powerline_setup
python3 powerline_setup()
python3 del powerline_setup

""""""""""""""""""""""""""""""""""""""""""
" psf/black
" ----------------------------------------

autocmd BufWritePre *.py execute ':Black'

""""""""""""""""""""""""""""""""""""""""""
" python-mode
" ----------------------------------------

let g:pymode = 1
let g:pymode_warnings = 0
let g:pymode_paths = []
let g:pymode_trim_whitespaces = 0
let g:pymode_options = 0
let g:pymode_options_max_line_length = 79
let g:pymode_options_colorcolumn = 0
let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 6
let g:pymode_python = 'python'
let g:pymode_indent = 0
let g:pymode_folding = 0
let g:pymode_motion = 0
let g:pymode_doc = 0
let g:pymode_doc_bind = 'K'
let g:pymode_virtualenv = 0
let g:pymode_virtualenv_path = $VIRTUAL_ENV
let g:pymode_run = 0
let g:pymode_run_bind = '<leader>r'
let g:pymode_breakpoint = 0
let g:pymode_breakpoint_cmd = ''
let g:pymode_lint = 0
let g:pymode_lint_on_write = 0
let g:pymode_lint_unmodified = 0
let g:pymode_lint_on_fly = 0
let g:pymode_lint_message = 0
" Values may be chosen from: `pylint`, `pep8`, `mccabe`, `pep257`, `pyflakes`
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
let g:pymode_lint_ignore = "E501,W"
" let g:pymode_lint_select = "E501,W0011,W430"
let g:pymode_lint_sort = []
let g:pymode_lint_cwindow = 0
let g:pymode_lint_signs = 0
let g:pymode_lint_todo_symbol = 'WW'
let g:pymode_lint_comment_symbol = 'CC'
let g:pymode_lint_visual_symbol = 'RR'
let g:pymode_lint_error_symbol = 'EE'
let g:pymode_lint_info_symbol = 'II'
let g:pymode_lint_pyflakes_symbol = 'FF'
" rope
let g:pymode_rope = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_completion_bind = '<C-Space>'
let g:pymode_rope_autoimport = 0
let g:pymode_rope_autoimport_modules = ['os', 'shutil', 'datetime']
let g:pymode_rope_autoimport_import_after_complete = 0
let g:pymode_syntax = 0
let g:pymode_syntax_slow_sync = 0
let g:pymode_syntax_all = 0
let g:pymode_syntax_print_as_function = 0
let g:pymode_syntax_highlight_async_await = g:pymode_syntax_all
